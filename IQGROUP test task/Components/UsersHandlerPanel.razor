@using System.Text.Json;
@inject HttpClient _httpClient
<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
<div>
    <div>
        <h3>
            User handler panel
        </h3>
    </div>
    <div>
        <batton>
            Add
        </batton>
        <input
            type="text"
            placeholder="Enter user Login"
        />
    </div>
    <div>
        <div>Users list</div>
        <div>
            <table>
                <thead>
                    <tr>
                        <th>
                            _id
                        </th>
                        <th>
                            Login
                        </th>
                        <th>
                            Email
                        </th>
                        <th>
                            Password
                        </th>
                        <th>
                            
                        </th>
                        <th>
                            
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var user in usersList)
                    {
                        if (currentUserId != user._id)
                        {
                            <tr>
                                <td>
                                    @user._id
                                </td>
                                <td>
                                    @user.Login
                                </td>
                                <td>
                                    @user.Email
                                </td>
                                <td>
                                    @user.Password
                                </td>

                                <td>
                                    <button @onclick="() => UpdateUserAsync(user._id)">
                                        <img src="/pencil.png" width="25" height="25" />
                                    </button>
                                </td>

                                <td>
                                    <button @onclick="() => DeleteUserAsync(user._id)">
                                        <img src="/trash_box.png" width="25" height="25"/>
                                    </button>
                                </td>
                            </tr>
                        }
                        else
                        {
                            <tr>
                                <td>
                                    <input placeholder="@user._id" />
                                </td>
                                <td>
                                    <input placeholder="@user.Login" />
                                </td>
                                <td>
                                    <input placeholder="@user.Email" />
                                </td>
                                <td>
                                    <input placeholder="@user.Password" />
                                </td>

                                <td>

                                </td>

                                <td>
                                    
                                </td>
                            </tr>
                            <button>
                                Сохранить изменения
                            </button>
                            <button @onclick="() => UpdateUserAsync(user._id)">
                                Отменить изменения
                            </button>
                        }

                    
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>
        </Authorized>
        <NotAuthorized>
            <div>
                <h3>Войдите, чтобы увидеть список пользователей</h3>
            </div>
        </NotAuthorized>

    </AuthorizeView>
</CascadingAuthenticationState>
@code{
    private List<UserModel> usersList = new List<UserModel>();

    private string currentUserId = "";

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("123");
        await GetUsersListAsync();
    }

    private async Task GetUsersListAsync()
    {
        try
        {
            var response = await _httpClient.GetAsync("api/user");
            if (response.IsSuccessStatusCode)
            {
                var users = await response.Content.ReadFromJsonAsync<List<UserModel>>();
                if(users != null)
                {
                    usersList = users;
                }
            }
            else
            {

            }
        }
        catch(Exception ex)
        {

        }
    }

    private async Task UpdateUserAsync(string id)
    {
        if (id != currentUserId)
            currentUserId = id;
        else
        {
            currentUserId = "";
        }
    }

    private async Task DeleteUserAsync(string id)
    {
        if (!string.IsNullOrEmpty(id))
        {
            try
            {
                var response = await _httpClient.DeleteAsync($"api/user/{id}");
                if(response.IsSuccessStatusCode)
                {

                }
                else
                {
                    
                }
            }
            catch(Exception ex)
            {
                
            }
        }
    }

    private async Task AddNewUserAsync()
    {

    }
}
