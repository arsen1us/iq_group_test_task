@page "/counter"
@attribute [Authorize(Roles = "admin")]
@using Microsoft.AspNetCore.SignalR.Client;

@inject NavigationManager Navigation;

@* Внедрение логгирования *@
@inject ILogger<Program> _logger;

@using System.Text.Json;

<PageTitle>Counter</PageTitle>
<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <h1>Counter</h1>
    
            <p role="status">Current count: @currentCount</p>
            <p>Message for current user</p>
            <p class="@m">@m</p>
            <p>Message for others users</p>
            <p>@otherM</p>
            <p>Connection state</p>
            <p>@connectionState</p>
            <button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
            <button @onclick="Send">Send to signalR</button>
    
            <h3>Connected Users</h3>
            <ul>
                @foreach (var user in usersList)
                {
                    <li>@user</li>
                }
            </ul>
        </Authorized>
    </AuthorizeView>
    
    <AuthorizeView>
        <NotAuthorized>
            <p>You are not authorized!</p>
        </NotAuthorized>
    </AuthorizeView> 
</CascadingAuthenticationState>
@code {
    private List<string> usersList = new List<string>();
    private int currentCount = 0;
    private HubConnection hubConnection;

    // Сообщение для текущего пользователя, который подключился
    private string m;

    // Сообщение для остальных пользователей, кто подключился
    private string otherM;

    // Цветовая схема
    private string colorscheme = "white";

    // id текущего пользователя
    private string userGuid;

    // состояние подключения пользователей
    private string connectionState;

    private async Task IncrementCount()
    {
        currentCount++;
    }

    protected override async Task OnInitializedAsync()
    {
        userGuid = Guid.NewGuid().ToString();
        hubConnection = new HubConnectionBuilder().WithUrl(Navigation.ToAbsoluteUri("/color-theme-hub")).Build();

        hubConnection.On<string, string>("Receive", (message, id) =>
        {
            m = colorscheme = message;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, string>("Receive1", (message, id) =>
        {
            otherM = message;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("OnConnection", message =>
        {
            connectionState = message;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("OnDisconnection", message =>
        {
            connectionState = message;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("UsersList", users => {
            usersList = JsonSerializer.Deserialize<List<string>>(users);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
        _logger.LogInformation("/conter page initialized");
    }

    private async Task Send()
    {
        await hubConnection.SendAsync("Send", colorscheme == "white" ? "black" : "white", userGuid);
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
            await hubConnection.DisposeAsync();
    }


}
