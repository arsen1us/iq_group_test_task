@inject HttpClient _httpClient;
@inject IJSRuntime _jsRuntime
@inject ILogger<Program> _logger;
@inject IDateTimeService _dateTimeService;

<button @onclick="ShowPopUp">Добавить нового пользователя</button>
<Popup IsVisible="@popupIsVisible" OnClose="@HandlePopupClose">
    <h3>Добавить нового пользователя</h3>

    <EditForm Model="@regUser" OnValidSubmit="@AddNewUserAsync">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="login">Логин</label>
            <InputText id="login"
                       class="form-control"
                       @bind-Value="regUser.Login"
                       placeholder="Логин"
                       @onblur="CheckLoginAvailability" />
            <ValidationMessage For="@(() => regUser.Login)" />
            @loginAvailability
        </div>

        <div class="form-group">
            <label for="email">Почта</label>
            <InputText id="email"
                       class="form-control"
                       @bind-Value="regUser.Email"
                       placeholder="Почта"
                       @onblur="CheckEmailAvailability" />
            <ValidationMessage For="@(() => regUser.Email)" />
            <p>@emailAvailability</p>
        </div>

        <div class="form-group">
            <label for="password">Пароль</label>
            <InputText id="password"
                       class="form-control"
                       @bind-Value="regUser.Password"
                       placeholder="Пароль"
                       type="@passwordInputType" />
            <button type="button" @onclick="TogglePasswordVisible">
                <img src="@visiblePassImgSrc" width="25" height="25" />
            </button>
            <ValidationMessage For="@(() => regUser.Password)" />
        </div>

        <div class="form-group">
            <label for="confirmPassword">Подтверждение пароля</label>
            <InputText id="confirmPassword"
                       class="form-control"
                       @bind-Value="regUser.ConfirmPassword"
                       placeholder="Повторите пароль"
                       type="@confirmPasswordInputType" />
            <button type="button" @onclick="ToggleConfirmPasswordVisible">
                <img src="@visibleConfirmPassImgSrc" width="25" height="25" />
            </button>
            <ValidationMessage For="@(() => regUser.ConfirmPassword)" />
        </div>

        <button type="submit" class="btn btn-primary">Добавить</button>
    </EditForm>
</Popup>


@code {
    // Для обновления списка при успешном добавлении пользователя
    [Parameter]
    public EventCallback OnUserSuccessfullyAdded{ get; set; }

    private RegUserModel regUser = new RegUserModel();

    private bool popupIsVisible = false;

    private string loginAvailability = "";
    private string emailAvailability = "";
    // Показать/скрыть видимость пароля

    private bool isPasswordVisible = false;
    private string passwordInputType => isPasswordVisible ? "text" : "password";
    private string visiblePassImgSrc => isPasswordVisible ? "/visible_white.png" : "/hide_white.png";
    // Показать/скрыть видимость подтверждения пароля

    private bool isConfirmPasswordVisible = false;
    private string confirmPasswordInputType => isConfirmPasswordVisible ? "text" : "password";
    private string visibleConfirmPassImgSrc => isConfirmPasswordVisible ? "/visible_white.png" : "/hide_white.png";
    // Отправить запрос на добавление нового пользователя

    private async Task AddNewUserAsync()
    {
        string timestamp = _dateTimeService.GetDateTimeNow();
        if (loginAvailability == "Логин доступен" && emailAvailability == "Почта доступна")
        {


            try
            {
                var response = await _httpClient.PostAsJsonAsync("api/user/reg", regUser);

                if (response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadFromJsonAsync<AuthResponseModel>();
                    if (content != null)
                    {
                        // log
                        HandlePopupClose(false);

                        // Уведомление для обновления списка
                        await OnUserSuccessfullyAdded.InvokeAsync(null);
                        _logger.LogInformation($"INFO: [{timestamp}] New user successfully added to database. New user id - [{content.UserId}]");
                    }
                }
                else
                {
                    _logger.LogError($"ERROR: [{timestamp}] Registration request error. Status code - {response.StatusCode}");
                }
            }

            catch (Exception ex)
            {
                _logger.LogError($"ERROR: [{timestamp}] Unexpected - {ex.Message}");
                throw new Exception($" Unexpected exception. Details {ex.Message}");
            }
        }
    }
    // Проверка логина на уникальность

    private async Task CheckLoginAvailability()
    {
        string timestamp = _dateTimeService.GetDateTimeNow();
        bool isAvailable;

        try
        {
            var response = await _httpClient.PostAsJsonAsync("api/user/check-login", regUser.Login);
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                if (content != null)
                {
                    bool.TryParse(content, out isAvailable);
                    loginAvailability = isAvailable == true ? "Логин доступен" : "Логин занят";
                    _logger.LogInformation($"INFO: [{timestamp}] Login checking completed successfully. Login - [{regUser.Login}]");
                }
            }
            else
            {
                _logger.LogError($"ERROR: [{timestamp}] Checking login request error. Status code - {response.StatusCode}");
            }
        }
        catch(Exception ex)
        {
            _logger.LogError($"ERROR: [{timestamp}] Unexpected - {ex.Message}");
            throw new Exception($" Unexpected exception. Details {ex.Message}");
        }
    }
    // Проверка почты на уникальность

    private async Task CheckEmailAvailability()
    {
        string timestamp = _dateTimeService.GetDateTimeNow();
        bool isAvailable;
        try
        {
            var response = await _httpClient.PostAsJsonAsync("api/user/check-email", regUser.Email);
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                if (content != null)
                {
                    bool.TryParse(content, out isAvailable);
                    emailAvailability = isAvailable == true ? "Почта доступна" : "Почта занята";
                    _logger.LogInformation($"INFO: [{timestamp}] Email checking completed successfully. Email - [{regUser.Email}]");
                }
            }
            else
            {
                _logger.LogError($"ERROR: [{timestamp}] Checking email request error. Status code - {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            _logger.LogError($"ERROR: [{timestamp}] Unexpected - {ex.Message}");
            throw new Exception($" Unexpected exception. Details {ex.Message}");
        }
    }
    // Открыть попап

    private void ShowPopUp()
    {
        popupIsVisible = true;
    }
    // Закрыть попап

    private void HandlePopupClose(bool isVisible)
    {
        popupIsVisible = isVisible;
    }
    // Скрыть/открыть пароль

    private async Task TogglePasswordVisible()
    {
        isPasswordVisible = !isPasswordVisible;
    }
    // Скрыть/открыть подтверждение пароля

    private async Task ToggleConfirmPasswordVisible()
    {
        isConfirmPasswordVisible = !isConfirmPasswordVisible;
    }
}
